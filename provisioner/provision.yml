---
- hosts: localhost
  gather_facts: yes

  module_defaults:
    group/k8s:
      host: "{{ ocp_host }}"
      validate_certs: no

  tasks:
    - name: Log in (obtain token)
      k8s_auth:
        username: "{{ ocp_user }}"
        password: "{{ ocp_pass }}"
      register: k8s_auth_results
      tags: 
        - always

    - name: Create new Project (namespace)
      k8s:
        name: "{{ demo_name }}"
        api_version: v1
        kind: Namespace
        state: present
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: odh

    - name: Deploy ODH Operator
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/odh/operator.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: odh

    - name: Check ODH operator
      k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: customresourcedefinitions
        name: kfdefs.kfdef.apps.kubeflow.org
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      until: odh_operator.resources | length > 0 
      register: odh_operator
      tags: odh

    - name: Show ODH installation info
      debug: 
        #msg: "{{ odh_operator.resources.metadata.name }}"
        msg: "{{ odh_operator.resources[0].metadata.name }} created at {{ odh_operator.resources[0].metadata.creationTimestamp }}"
      tags: odh
 
    - name: Check installed operators
      k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: subscriptions
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: operator_list
      tags: odh

    - name: Check if Strimzi operator is present
      set_fact:
        strimzi_installed: "{{ 'strimzi' in operator_list.resources | json_query(query) }}"
      vars:
        query: "[].metadata.name"
      tags: odh 

    - name: Deploy ODH - Strimzi Operator
      k8s:
        state: present
        definition: "{{ lookup('file', '../deploy/odh/odh-with-strimzi.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      when: strimzi_installed == false
      tags: odh 
    
    - name: Deploy ODH - No Strimzi Operator
      k8s:
        state: present
        definition: "{{ lookup('file', '../deploy/odh/odh-no-strimzi.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      when: strimzi_installed == true
      tags: odh 

    - name: Validate seldon pod is ready
      include_tasks: 
        file: check_seldon_pods.yml
        apply: 
          tags: odh
      tags: odh 

    - name: Create machines tasks
      include_tasks:
        file: create_machines_tasks.yml
        apply:
          tags:
            - storage
            - machines
      tags: 
        - storage
        - machines
        
    - name: OCS Tasks
      include_tasks: 
        file: ocs_install_tasks.yml
        apply: 
          tags: 
            - ocs_install
            - storage
      tags: storage
      when: ocs_install == True

    - name: Rook-Ceph Tasks
      include_tasks:
        file: rook-ceph_install_tasks.yml
        apply: 
          tags: 
            - rookceph_install
            - storage
      tags: storage
      when: ocs_install == False

    - name: Define OBC for OCS or Rook-Ceph
      set_fact:
        obc_file: "../deploy/storage/{{ ocs_install | ternary('obc-ocs.yaml','obc-rook.yaml') }}"
      tags: 
        - create_bucket
        - storage

    - name: Create Bucket in OCS through Object Bucket Claim
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', obc_file) | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: 
        - create_bucket
        - storage

    - name: Deploy the Fraud Detection model with Seldon
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: fraud_model

    - name: Check model is created
      include_tasks: 
        file: check_fraud_model.yml
        apply:
          tags: fraud_model
      tags: fraud_model

    - name: Expose Route for seldon model
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull-route.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: modelfull_route
      tags: fraud_model

    - name: Validate seldon pod is ready
      include_tasks: 
        file: check_modelfull_pod.yml
        apply:
          tags: fraud_model
      tags: fraud_model

    - name: Wait for service availability
      pause:
        seconds: 60
      tags: fraud_model

    - name: Simulate a transaction
      uri:
        url: "http://{{ modelfull_route.result.spec.host }}/api/v1.0/predictions"
        method: POST
        body_format: json
        body: 
          strData: "0.365194527642578,0.819750231339882,-0.5927999453145171,-0.619484351930421,-2.84752569239798,1.48432160780265,0.499518887687186,72.98" 
      register: simul_transaction
      tags: 
        - fraud_model
        - simul_transaction

    - name: Enable Prometheus service monitor
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull-servicemonitor.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: 
        - fraud_model
        - prometheus

    - name: Enable Prometheus service monitor
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull-custom-metrics-monitor.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: 
        - fraud_model
        - prometheus

    - name: Upload data to OCS/ODF tasks
      include_tasks: 
        file: upload_data_tasks.yml
        apply: 
          tags: upload_data
      tags: upload_data

    - name: KIE Server tasks
      include_tasks:
        file: kie_server_tasks.yml
        apply: 
          tags: kie 
      tags: kie
    
    - name: If login succeeded, try to log out (revoke access token)
      when: k8s_auth_results.k8s_auth.api_key is defined
      k8s_auth:
        state: absent
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      tags: always
