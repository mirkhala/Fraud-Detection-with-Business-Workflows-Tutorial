---
- hosts: localhost
  gather_facts: no

  vars:
    ocs_ns: ocs-project

  module_defaults:
    group/k8s:
      host: "{{ ocp_host }}"
      validate_certs: no

  tasks:
    - name: Log in (obtain token)
      k8s_auth:
        username: "{{ ocp_user }}"
        password: "{{ ocp_pass }}"
      register: k8s_auth_results

    - name: Create new Project (namespace)
      k8s:
        name: "{{ demo_name }}"
        api_version: v1
        kind: Namespace
        state: present
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Deploy ODH Operator
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/odh/operator.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Check ODH operator
      k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: customresourcedefinitions
        name: kfdefs.kfdef.apps.kubeflow.org
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      until: odh_operator.resources | length > 0 
      register: odh_operator

    - name: Show ODH installation info
      debug: 
        #msg: "{{ odh_operator.resources.metadata.name }}"
        msg: "{{ odh_operator.resources[0].metadata.name }} created at {{ odh_operator.resources[0].metadata.creationTimestamp }}"
 
    - name: Check installed operators
      k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: subscriptions
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: operator_list

    - name: Check if Strimzi operator is present
      set_fact:
        strimzi_installed: "{{ 'strimzi' in operator_list.resources | json_query(query) }}"
      vars:
        query: "[].metadata.name"

    - name: Deploy ODH - Strimzi Operator
      k8s:
        state: present
        definition: "{{ lookup('file', '../deploy/odh/odh-with-strimzi.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      when: strimzi_installed == false
    
    - name: Deploy ODH - No Strimzi Operator
      k8s:
        state: present
        definition: "{{ lookup('file', '../deploy/odh/odh-no-strimzi.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      when: strimzi_installed == true

    - name: Validate seldon pod is ready
      include_tasks: check_seldon_pods.yml

    - name: OCS - Get machineset info
      k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: machine.openshift.io/v1beta1
        kind: MachineSet
        namespace: openshift-machine-api
      register: machineset_info

    - name: set cluster id, image id from machineset info
      set_fact:
        cluster_id: "{{Â machineset_info.resources[0].metadata.labels['machine.openshift.io/cluster-api-cluster'] }}"
        image_id: "{{ machineset_info.resources[0].spec.template.spec.providerSpec.value.ami.id }}"

    - name: OCS - Create a Machineset for OCS deployment
      k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        state: present
        definition: "{{ lookup('template', 'templates/ocslab_cluster-workerocs.yaml.j2') }}"

    - name: OCS - check machines
      include_tasks: check_ocp_machines.yml

    - name: OCS - Create namespace
      k8s:
        name: "{{ ocs_ns }}"
        api_version: v1
        kind: Namespace
        state: present
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: OCS - Create OperatorGroup
      k8s:
        state: present
        definition: "{{ lookup('file', 'ocs-operator-group.yml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: OCS - Create subscription
      k8s:
        state: present
        definition: "{{ lookup('file', 'ocs-subscription.yml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: csv

    - name: Create Bucket in OCS
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/storage/obc-ocs.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Deploy the Fraud Detection model with Seldon
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Check model is created
      include_tasks: check_fraud_model.yml

    - name: Expose Route for seldon model
      k8s:
        state: present
        namespace: "{{ demo_name }}"
        definition: "{{ lookup('file', '../deploy/model/modelfull-route.yaml') | from_yaml }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: modelfull_route

    - name: Validate seldon pod is ready
      include_tasks: check_modelfull_pod.yml

    - name: Simulate a transaction
      uri:
        url: "http://{{ modelfull_route.result.spec.host }}/api/v1.0/predictions"
        method: POST
        body_format: json
        body: 
          strData: "0.365194527642578,0.819750231339882,-0.5927999453145171,-0.619484351930421,-2.84752569239798,1.48432160780265,0.499518887687186,72.98" 
      register: simul_transaction

    - name: Get Secret
      k8s_info:
        api_version: v1
        kind: Secret
        name: ccdata
        namespace: ccfd
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: secret_list

    - name: Store secret facts
      set_fact:
        bucket_access_key: "{{ secret_list.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"
        bucket_secret_key: "{{ secret_list.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"

    - name: Get Config Map
      k8s_info:
        api_version: v1
        kind: ConfigMap
        name: ccdata
        namespace: ccfd
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: cm_list

    - name: Store bucket name
      set_fact:
        bucket_name: "{{ cm_list.resources[0].data.BUCKET_NAME }}"

    - name: Show Host(Internal Access)
      debug:
        msg: "{{ cm_list.resources[0].data.BUCKET_HOST }}"

    - name: Get External Access (Route)
      k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        name: s3
        namespace: openshift-storage
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      register: route_list
        
    - name: Store host_external_access
      set_fact:
        host_external_access: "{{ route_list.resources[0].spec.host }}"

    - name: Show Host(External Access)
      debug:
        msg: "{{ route_list.resources[0].spec.host }}"

    - name: Create Secret to store keys
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            namespace: "{{ demo_name }}"
            name: keysecret
          data:
            accessKey: "{{ bucket_access_key }}"
            secretkey: "{{ bucket_secret_key }}"

    - name: Get CSV Data
      set_fact:
        csv_datafile:
          dest: /tmp/data_creditcard.csv

    - name: Upload CSV to Bucket
      aws_s3:
        aws_access_key: "{{ bucket_access_key }}"
        aws_secret_key: "{{ bucket_secret_key }}"
        s3_url: "https://{{ host_external_access }}"
        bucket: "{{ bucket_name }}"
        src: "{{ csv_datafile.dest }}"
        object: "{{ csv_datafile.dest.split('/')[2] }}"
        mode: put
