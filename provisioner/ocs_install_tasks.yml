---
- name: OCS - Get machineset info
  k8s_info:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    api_version: machine.openshift.io/v1beta1
    kind: MachineSet
    namespace: openshift-machine-api
  register: machineset_info

- name: set cluster id, image id from machineset info
  set_fact:
    cluster_id: "{{Â machineset_info.resources[0].metadata.labels['machine.openshift.io/cluster-api-cluster'] }}"
    image_id: "{{ machineset_info.resources[0].spec.template.spec.providerSpec.value.ami.id }}"

- name: OCS - Create a Machineset for OCS deployment
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    definition: "{{ lookup('template', 'templates/ocslab_cluster-workerocs.yaml.j2') }}"

- name: OCS - check machines 
  include_tasks: check_ocp_machines.yml

- name: OCS - check nodes
  include_tasks: check_ocp_nodes_ocs.yml

- name: OCS - Create namespace
  k8s:
    name: "{{ ocs_ns }}"
    api_version: v1
    kind: Namespace
    state: present
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

- name: OCS - Create OperatorGroup
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/ocs-operator-group.yml.j2') | from_yaml }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

- name: OCS - Create subscription
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/ocs-subscription.yml.j2') | from_yaml }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  register: csv

- name: OCS - Check OCS Operator install status
  include_tasks: check_ocs_operator_install.yml

- name: OCS - Create StorageCluster
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/ocs-storagecluster.yml.j2') | from_yaml }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  register: storage_cluster

- name: OCS - Check StorageCluster 
  include_tasks: check_ocs_storagecluster.yml 

- name: OCS - Deploy Object Store
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/ocs-object.yml.j2') | from_yaml }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  register: object_store
  tags: object_store
    
- name: OCS - Wait for Object store creation
  include_tasks: 
    file: check_ocs_rgw_pod.yml
    apply: 
      tags: check_rgw
  tags: check_rgw

- name: OCS - Expose Route for Object Store
  k8s:
    kind: Route
    api_version: route.openshift.io/v1
    state: present
    namespace: "{{ ocs_ns }}"
    definition:
      kind: Route
      apiVersion: route.openshift.io/v1
      metadata:
        name: s3-rgw
        namespace: "{{ ocs_ns }}"
        labels:
          app: rook-ceph-rgw
          ceph_daemon_id: ocs-storagecluster-cephobjectstore
          ceph_daemon_type: rgw
          rgw: ocs-storagecluster-cephobjectstore
          rook_cluster: openshift-storage
          rook_object_store: ocs-storagecluster-cephobjectstore
      spec:
        to:
          kind: Service
          name: rook-ceph-rgw-ocs-storagecluster-cephobjectstore
        port:
          targetPort: http
        tls:
          termination: edge
          insecureEdgeTerminationPolicy: Allow
        wildcardPolicy: None
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  register: object_store_route
  tags: object_store

- name: OCS - Create the StorageClass to create OBCs against this RGW
  k8s:
    state: present
    namespace: "{{ ocs_ns }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    definition:
      kind: StorageClass
      apiVersion: storage.k8s.io/v1
      metadata:
        name: ocs-storagecluster-ceph-rgw
        annotations:
          description: Provides Object Bucket Claims (OBCs) using the RGW
      provisioner: openshift-storage.ceph.rook.io/bucket
      parameters:
        objectStoreName: ocs-storagecluster-cephobjectstore
        objectStoreNamespace: openshift-storage
        region: us-east-1
      reclaimPolicy: Delete
      volumeBindingMode: Immediate
  tags: object_store

