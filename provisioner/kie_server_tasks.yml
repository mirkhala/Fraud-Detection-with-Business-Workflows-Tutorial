---
- name: Seldon model for the prediction service - create ImageStreamImports
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: default
    definition: 
      kind: ImageStreamImport
      apiVersion: image.openshift.io/v1
      metadata:
        name: newapp
      spec:
        import: false
        images:
          - from:
              kind: DockerImage
              name: "{{ kie_app_name }}" 
  register: imagestreamimports
  tags: kie

- name: set proper name
  set_fact: 
    imagestream_name: "{{ kie_app_name.split('/')[-1].split(':')[0] }}"
  tags: kie

- name: Seldon model for the prediction service - Create ImageStream
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: default
    definition: "{{ lookup('template', 'templates/kie_imagestream.yaml.j2') }}"
  vars:
    name: "{{ kie_app_name.split('/')[-1] }}" 
  register: imagestream
  tags: kie

- name: Seldon model for the prediction service - Get ImageStreamTags
  k8s_info:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    api_version: image.openshift.io/v1
    namespace: default
    kind: ImageStreamTag
    name: "{{ name }}"
  vars:
    name: "{{ kie_app_name.split('/')[-1] }}" 
  register: imagestreamtags
  tags: kie

- name: Seldon model for the prediction service - Create Deployment
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: default
    definition: "{{ lookup('template', 'templates/kie_deployment.yaml.j2') }}"
  register: kie_deployment
  tags: kie

- name: Seldon model for the prediction service - Create Service
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: default
    definition: "{{ lookup('template', 'templates/kie_service.yaml.j2') }}"
  register: kie_deployment
  tags: kie

# es esto opcional??? o es uno en vez del otro???
- name: Execution server
  k8s:
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/ccd-service.yaml') | from_yaml_all | list }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  register: kie_exec_server
  tags: 
    - kie
    - test

- name: Notification service
  k8s:
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/notification-service.yaml') | from_yaml_all | list }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  tags: notification

- name: Camel Router
  k8s:
    state: present
    namespace: "{{ demo_name }}"
    src: ../deploy/router.yaml
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  tags: notification

- name: Set Facts
  # s3_bucket from upload_data_tasks.yml --> todo: change name 
  # host_external_access from upload_data_tasks.yml
  set_fact:
    filename: "OPEN/uploaded/creditcard.csv"
    s3_endpoint: "https://{{ route_list.resources[0].spec.host }}"
    s3_bucket: "{{ bucket_name }}"
  tags: notification

- name: Process Template
  shell: "oc login {{ ocp_host }} -u {{ ocp_user }} -p {{ ocp_pass }} --insecure-skip-tls-verify=true >/dev/null 2>&1 ; oc process -o yaml -f ../deploy/kafka/producer-deployment.yaml -p NAMESPACE={{ demo_name }} -p S3BUCKET={{ s3_bucket }} -p FILENAME={{ filename }}  -p S3ENDPOINT={{ s3_endpoint }}"
  register: oc_process
  tags: notification

- name: Kafka Producer
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ oc_process.stdout | from_yaml }}"
  tags: notification

- name: Grafana - Kie Server Service Monitor
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/servicemonitors/ccdserviceservicemonitor.yaml') | from_yaml }}"
  tags: notification

- name: Grafana - Camel Router Service Monitor
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/servicemonitors/ccdserviceservicemonitor.yaml') | from_yaml }}"
  tags: notification

- name: Grafana - Seldon Core
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/grafana/seldon-core-dashboard.yaml') | from_yaml }}"
  tags: notification

- name: Grafana - Model Prediction
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/grafana/seldon-model-prediction.yaml') | from_yaml }}"
  tags: notification

- name: Grafana - Kie Server
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/grafana/kie-dashboard.yaml') | from_yaml }}"
  tags: notification

- name: Grafana - Camel Router
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    state: present
    namespace: "{{ demo_name }}"
    definition: "{{ lookup('file', '../deploy/grafana/router-dashboard.yaml') | from_yaml }}"
  tags: notification
